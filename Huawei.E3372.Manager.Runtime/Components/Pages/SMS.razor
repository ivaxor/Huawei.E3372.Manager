@page "/sms"
@rendermode InteractiveServer

<PageTitle>SMS</PageTitle>

<div class="row">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><NavLink href="/">Home</NavLink></li>
                <li class="breadcrumb-item active" aria-current="page">SMS</li>
            </ol>
        </nav>
    </div>

    <div class="col text-end">
        <button @onclick="() => Modal.Open()" class="btn btn-primary">
            <i class="bi bi-send"></i>
            Send SMS
        </button>
    </div>
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th scope="col">DateTime</th>
            <th scope="col">Status</th>
            <th scope="col">Sender</th>
            <th scope="col">Receiver</th>
            <th scope="col">Content</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (ModemSms == null || ModemById == null)
        {
            <tr class="placeholder-glow">
                <td><span class="placeholder col-12"></span></td>
                <td><span class="placeholder col-12"></span></td>
                <td><span class="placeholder col-12"></span></td>
                <td><span class="placeholder col-12"></span></td>
                <td><span class="placeholder col-12"></span></td>
                <td><span class="placeholder col-12"></span></td>
            </tr>
        }

        @foreach (var sms in ModemSms ?? Enumerable.Empty<ModemSms>())
        {
            var trClass = sms.Status switch
            {
                ModemSmsStatus.Unread => "table-primary",
                ModemSmsStatus.Read => "table-secondary",
                ModemSmsStatus.Failed => "table-warning",
                ModemSmsStatus.Delivered => "table-info",
                _ => throw new NotImplementedException(),
            };

            var secondaryActionDisabled = sms.Status == ModemSmsStatus.Read;
            var secondaryActionIconClassName = sms.Status switch
            {
                ModemSmsStatus.Unread => "bi bi-check",
                ModemSmsStatus.Read => "bi bi-check-all",
                ModemSmsStatus.Failed => "bi bi-arrow-repeat",
                ModemSmsStatus.Delivered => "bi bi-arrow-repeat",
                _ => throw new NotImplementedException(),
            };
            var secondaryActionTitle = sms.Status switch
            {
                ModemSmsStatus.Unread => "Mark as read",
                ModemSmsStatus.Read => string.Empty,
                ModemSmsStatus.Failed => "Retry",
                ModemSmsStatus.Delivered => "Repeat",
                _ => throw new NotImplementedException(),
            };
            Action secondaryActionFunction = sms.Status switch
            {
                ModemSmsStatus.Unread => (() => MarkAsRead(sms)),
                ModemSmsStatus.Read => (() => { }),
                ModemSmsStatus.Failed => (() =>
                {
                    Model.FromModemId = ModemById[sms.ModemId].Id.ToString();
                    Model.ToPhoneNumbers = sms.ToPhoneNumbers;
                    Model.Content = sms.Content;
                    Modal.Open();
                }),
                ModemSmsStatus.Delivered => (() =>
                {
                    Model.FromModemId = ModemById[sms.ModemId].Id.ToString();
                    Model.ToPhoneNumbers = sms.ToPhoneNumbers;
                    Model.Content = sms.Content;
                    Modal.Open();
                }),
                _ => throw new NotImplementedException(),
            };

            <tr class="@trClass">
                <td>@sms.DateTime</td>
                <td>
                    @switch (sms.Status)
                    {
                        case ModemSmsStatus.Unread:
                            <i class="bi bi-envelope"></i>
                            <i class="bi bi-arrow-down"></i>
                            break;
                        case ModemSmsStatus.Read:
                            <i class="bi bi-envelope-open"></i>
                            <i class="bi bi-arrow-down"></i>
                            break;
                        case ModemSmsStatus.Failed:
                            <i class="bi bi-envelope-x"></i>
                            <i class="bi bi-arrow-up"></i>
                            break;
                        case ModemSmsStatus.Delivered:
                            <i class="bi bi-envelope-check"></i>
                            <i class="bi bi-arrow-up"></i>
                            break;
                    }
                    <p>@sms.Status</p>
                </td>
                <td>@sms.FromPhoneNumber</td>
                <td>
                    @foreach (var toPhoneNumber in sms.ToPhoneNumbers?.Split(",") ?? Enumerable.Empty<string>())
                    {
                        <p>@toPhoneNumber</p>
                    }
                </td>
                <td>@sms.Content</td>
                <td class="align-middle text-end">
                    <div class="btn-group" role="group" aria-label="Actions">
                        <button type="button" @onclick="() => secondaryActionFunction()" class="btn btn-secondary" title="@secondaryActionTitle">
                            <i class="@secondaryActionIconClassName"></i>
                        </button>
                        <button type="button" @onclick="() => Delete(sms)" class="btn btn-danger" title="Delete">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<ModalComponent @ref="Modal" Title="Send SMS" OnClose="OnClose">
    <EditForm EditContext="EditContext" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <AntiforgeryToken />

        <div class="mb-3 row">
            <label for="from" class="col-sm-2 col-form-label">From</label>
            <div class="col-sm-10">
                <InputSelect @bind-Value="Model.FromModemId" id="from" class="form-select">
                    @foreach (var kvp in ModemById ?? Enumerable.Empty<KeyValuePair<Guid, Modem>>())
                    {
                        <option value="@kvp.Key.ToString()" disabled="@(string.IsNullOrEmpty(kvp.Value.Status!.IMSI))">
                            @(kvp.Value.Status!.PhoneNumber ?? kvp.Value.Status!.IMSI)
                        </option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="mb-3 row">
            <label for="to" class="col-sm-2 col-form-label">To</label>
            <div class="col-sm-10">
                <InputText @bind-Value="Model.ToPhoneNumbers" placeholder="+1234567890,+9876543210" id="to" class="form-control" />
            </div>
        </div>

        <div class="mb-3 row">
            <label for="content" class="col-sm-2 col-form-label">Content</label>
            <div class="col-sm-10">
                <InputTextArea @bind-Value="Model.Content" placeholder="Lorem ipsum dolor sit amet." id="content" class="form-control"></InputTextArea>
            </div>
        </div>

        <div class="d-grid gap-2">
            <button type="submit" disabled="@IsSubmitted" class="btn btn-primary">
                @if (IsSubmitted)
                {
                    <div class="spinner-grow spinner-grow-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Sending</span>
                }
                else
                {
                    <i class="bi bi-search"></i>
                    <span>Send</span>
                }
            </button>
        </div>
    </EditForm>
</ModalComponent>